function [] = SM_Extract_Perturbed_SIFT_Features()
	% this function should run in foler PO_CR_code_v1
	% output : p_mat : size( n * Kpi, K);  delta_p : size(n * Kpi, K);
	% features : size(n * Kpi, N);  b_mat : size(n * Kpi, N)
	
	clear;
	global VERSIONCHECK; 
	VERSIONCHECK = 'SM_1';
	Kpi = 10;
	s = rng;

	% load models
	cd('vlfeat-0.9.20/toolbox');
 	vl_setup;
	cd('../../');
	gtParamDir = 'TR_params/';
	modelDir = 'matfiles/';
	shapemodel = load([modelDir 'shape_model.mat']);
	myShape = load([modelDir 'myShape.mat']); 
	myAppearance = load([modelDir 'myAppearanceSM.mat']);
	fd_stat = load([modelDir 'fd_stat_SM.mat']);
	shapemodel = shapemodel.shape;
	myShape = myShape.myShape;
	if myShape.version ~= VERSIONCHECK
		disp('myShape model is stale');
	end
	if  fd_stat.version ~= VERSIONCHECK
		disp('fd_stat model is stale');
	end
	num_of_pts = 68;                                               % num of landmarks in the annotations
	P = eye(size(myAppearance.A,1)) - myAppearance.A * myAppearance.A'; 
	N = size(myAppearance.A, 1);				 % number of SIFT features
	m = size(myAppearance.A, 2);                            % number of eigenvectors of myAppearance.A
	KNonrigid = size(myShape.pNonrigid, 2);           % number of eigenvectors of myShape.Q
	KRigid = size(myShape.pRigid, 2);
	K = KNonrigid + KRigid;
	A0P = myAppearance.A0' * P;  
	n1 = 2000;					
	n2 = 811;
	n = n1 + n2; 
	lm_pts = 5;
	lm_ind1 = [34, 37,46, 61, 65]; 
	lm_ind2 = [34,  37,46,  61, 65, 102,  105 ,114 ,129, 133]; 
	% collect training images from two datasets
  	%[TR_images, TR_face_size, TR_gt_landmarks, TR_myShape_p, TR_detections] = Collect_training_images(n1, n2) ;
	if(exist([gtParamDir 'TR_images.mat'], 'file') == 2)
		load([gtParamDir 'TR_images.mat']);
	end
	load([gtParamDir 'TR_detections.mat']); 
	load([gtParamDir 'TR_face_size.mat']);
	load([gtParamDir 'TR_gt_landmarks.mat']);
	load([gtParamDir 'TR_myShape_p.mat']);
	
	% initialize learning parameters
	fd_stat_std = fd_stat.std;
	fd_stat_mean = fd_stat.mean;

	p_mat_gt = zeros(n * Kpi, K);
	p_mat_initialization = zeros(n * Kpi, K);
	delta_p_initialization = zeros(n * Kpi, K);
	
	feat = zeros(Kpi, n, N);
	b_mat_temp = zeros(Kpi, n, N);
	pt_pt_err0_temp = zeros(n , Kpi);
	pt_pt_err0_image = zeros(n, 1);
	rng(s);
	
	%% initialize p_mat and add noise to pertubations 
	disp( 'initializing perturbed shape parameters');
	
	noise_scale = 1;					% scale the noise level to match the cum_error curve of initialization to that in the paper
	perturb_param = [5:K];
	OutputDir = ['../PerturbationInitialization_SM_' num2str(noise_scale) '_' mat2str(perturb_param) '/'];
	if(exist(OutputDir, 'dir') == 0)
		mkdir(OutputDir);
	end
	
	for gg = 1:n
		face_size = TR_face_size{gg};
		for k = 1 : Kpi
			% record gt and initialize p parameters
			p_mat_gt( (gg - 1) * Kpi + k, :) = TR_myShape_p(gg, :);
			p_mat_initialization((gg-1) * Kpi + k, :) = TR_myShape_p(gg, :);
			
			% construct noise
			noise = zeros(1, K);
			noise(1, 2:3) = (fd_stat.mean_delta_translation + fd_stat.std_delta_translation .* randn(1,2)) * face_size; 
			noise(1, 4) =fd_stat.mean_rotation_angle + fd_stat.var_rotation_angle * randn(1); 
			noise(1, 5:end) = fd_stat.mean_nonrigid_params + fd_stat.std_nonrigid_params .* randn(1, KNonrigid); 
			
			% add noise to scale
% 			p_mat_initialization((gg-1) * Kpi + k, 1) = p_mat_initialization((gg-1) * Kpi + k, 1) * (fd_stat_mean(1, 1) + fd_stat_std(1,1) * randn(1)); 

			% add noise to choisen parameters
			p_mat_initialization((gg-1) * Kpi + k, perturb_param) = p_mat_initialization((gg-1) * Kpi + k, perturb_param) + noise_scale * noise(1, perturb_param);
			% compute delta p
			delta_p_initialization((gg-1) * Kpi + k, :) = p_mat_gt( (gg - 1) * Kpi + k, :) - p_mat_initialization((gg-1) * Kpi + k, :); 
			% reconstruct landmarks
			lm = reconstruct_lm(myShape.s0, myShape.QNonrigid, p_mat_initialization((gg-1) * Kpi + k, :));  % plotgg, input_image, gt_landmark
			pt_pt_err0_temp(gg, k) = my_compute_error(TR_gt_landmarks{gg}(lm_ind1, :), lm, face_size);
		end
		% compute error and cumulative curve
		 pt_pt_err0_image(gg) = sum(pt_pt_err0_temp(gg, :)) / Kpi;
	end
	[pt_pt_err0_allimages, cum_err0] = Compute_cum_error(pt_pt_err0_image, n, OutputDir, 'cum error of initialization', 1); 
	
	% save results
	save([OutputDir 'Perturbed_Shape_Param_Initialization_SM.mat'], 'p_mat_gt', 'p_mat_initialization', 'delta_p_initialization', 'pt_pt_err0_allimages', 'pt_pt_err0_image', ...
		'cum_err0', 'Kpi', 'noise_scale', 'VERSIONCHECK');

	%% extract SIFT features
	for SIFT_scale = 2   % 1.5 : 0.5 : 2.5
 		disp([ 'extracting features... SIFT scale is ',num2str(SIFT_scale)]);
		parfor gg = 1 : n
			gg
			face_size = TR_face_size{gg};
			input_image = TR_images{gg};

			for k = 1 : Kpi
				lm = reconstruct_lm(myShape.s0, myShape.QNonrigid, p_mat_initialization((gg-1) * Kpi + k, :));
				Sfeat = SIFT_features(input_image, lm, SIFT_scale, k, face_size, myShape.s0);
				feat(k, gg, :) = reshape(Sfeat, 1, []); 
				b_mat_temp(k, gg, :) =  reshape(feat(k,gg, :), 1, []) * P - A0P;
			end
		end
		features = reshape(feat, Kpi * n, []); 
		b_mat = reshape(b_mat_temp, Kpi * n, []);
		save([OutputDir 'Perturbed_SIFT_Feature_labels_5_lms_S-'  num2str(SIFT_scale) '_Kpi-'  num2str(Kpi) '.mat'], 'b_mat');
		save([OutputDir 'Perturbed_SIFT_Features_5_lms_S-' num2str(SIFT_scale) '_Kpi-' num2str(Kpi) '.mat'], 'features');
	end
	disp('finished this function');
end










