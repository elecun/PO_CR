function [] = SM_3D_Extract_Perturbed_SIFT_Features()
	% this function should run in foler PO_CR_code_v1
	% output : p_mat : size( n * Kpi, K);  delta_p : size(n * Kpi, K);
	% features : size(n * Kpi, N);  b_mat : size(n * Kpi, N)
	
	clear;
	global VERSIONCHECK; 
	VERSIONCHECK = 'SM_3D_1';
	Kpi = 10;
	s = rng;
% 	vl_setup;
	
	% load models
	modelDir = 'matfiles/';
	myAppearance = load([modelDir 'myAppearanceSM.mat']);
	fd_stat_SM_3D = load([modelDir 'fd_stat_SM_3D.mat']);
	if fd_stat_SM_3D.version ~= 'SM_3D_1'
		disp('fd_stat_SM_3D model is stale');
	end
	myShapeSM3D = load([modelDir 'myShapeSM3D.mat']);
	if myShapeSM3D.version ~= 'SM_3D_1'
		disp('myShapeSM3D model is stale');
	end
	
	num_of_pts = 68;                                               % num of landmarks in the annotations
	P = eye(size(myAppearance.A,1)) - myAppearance.A * myAppearance.A'; 
	N = size(myAppearance.A, 1);				 % number of SIFT features
	KNonrigid = size(myShapeSM3D.V, 2);           % number of eigenvectors of myShape.Q
	KRigid = 6;
	K = KNonrigid + KRigid;
	A0P = myAppearance.A0' * P;  
	n1 = 2000;					
	n2 = 811;
	n = n1 + n2; 
	lm_pts = 5;
	lm_ind1 = [34, 37, 46, 61, 65]; 
	lm_ind2 = [34, 37, 46, 61, 65, 102, 105 ,114 ,129, 133]; 
	
	% collect training images from two datasets
%    	[TR_images, TR_face_size, TR_gt_landmarks, TR_myShape_3D_p, TR_detections] = Collect_training_images_3D(n1, n2) ;
	
	gtParamDir = 'TR_params/';
%  	load([gtParamDir 'TR_images.mat']);
	load([gtParamDir 'TR_detections.mat']); 
	load([gtParamDir 'TR_face_size.mat']);
	load([gtParamDir 'TR_gt_landmarks.mat']);
	load([gtParamDir 'TR_myShape_3D_p.mat']);
 	
	% initialize learning parameters
	p_mat_gt = zeros(n * Kpi, K);
	p_mat_initialization = zeros(n * Kpi, K);
	delta_p_initialization = zeros(n * Kpi, K);
	
	feat = zeros(Kpi, n, N);
	b_mat_temp = zeros(Kpi, n, N);
	pt_pt_err0_temp = zeros(n , Kpi);
	pt_pt_err0_image = zeros(n, 1);
	rng(s);
	
	%% initialize p_mat and add noise to pertubations 
	disp( 'initializing perturbed shape parameters');
	
	noise_scale = 0.2;					% scale the noise level to match the cum_error curve of initialization to that in the paper
	perturb_param = [7:K];
	OutputDir =[ '../PerturbationInitialization_SM_3D_' num2str(noise_scale) '_' mat2str(perturb_param) '/'];
	if(exist(OutputDir, 'dir') == 0)
		mkdir(OutputDir);
	end
	
	for gg = 1:n
		face_size = TR_face_size{gg};
		for k = 1 : Kpi
			% record gt and initialize p parameters
			p_mat_gt( (gg - 1) * Kpi + k, :) = TR_myShape_3D_p{gg};
			p_mat_initialization((gg-1) * Kpi + k, :) = TR_myShape_3D_p{gg};
			
			% construct noise
			noise = zeros(1, K);
			noise(1, 1) =  fd_stat_SM_3D.mean_delta_scale(1,1) + fd_stat_SM_3D.std_delta_scale(1,1) * randn(1); 
			noise(1, 2:3) = (fd_stat_SM_3D.mean_delta_translation(1, :) + fd_stat_SM_3D.std_delta_translation(1, :) .* randn(1,2)) * face_size; 
			noise(1, 4:6) = fd_stat_SM_3D.mean_rotation_euler(1,:) + fd_stat_SM_3D.std_rotation_euler(1,:) .* randn(1, 3); 
 			noise(1, 7:end) = fd_stat_SM_3D.mean_nonrigid_params(1,:) + fd_stat_SM_3D.std_nonrigid_params(1, :) .* randn(1, KNonrigid); 
			
			% add noise to scale
			p_mat_initialization((gg-1) * Kpi + k, 1) = p_mat_initialization((gg-1) * Kpi + k, 1) * noise(1,1);
			
			% add noise to choisen parameters
% 			p_mat_initialization((gg-1) * Kpi + k, perturb_param) = p_mat_initialization((gg-1) * Kpi + k, perturb_param) + noise_scale * noise(1, perturb_param);
			
			% compute delta p
			delta_p_initialization((gg-1) * Kpi + k, :) = p_mat_gt( (gg - 1) * Kpi + k, :) - p_mat_initialization((gg-1) * Kpi + k, :); 
			
			% reconstruct landmarks
% 			[lm] = getShapeFrom3DParam(myShapeSM3D.M, myShapeSM3D.V, p_mat_gt((gg-1) * Kpi + k, :) );
			[lm] = getShapeFrom3DParam(myShapeSM3D.M, myShapeSM3D.V, p_mat_initialization((gg-1) * Kpi + k, :) );	%(p_mat_initialization((gg-1) * Kpi + k, :)); 
			pt_pt_err0_temp(gg, k) = my_compute_error(TR_gt_landmarks{gg}(lm_ind1, :), lm, face_size);
			figure; hold on;
			plot(lm(:, 1), lm(:, 2));
			plot(
		end
		% compute error and cumulative curve
		 pt_pt_err0_image(gg) = sum(pt_pt_err0_temp(gg, :)) / Kpi;
	end
	[pt_pt_err0_allimages, cum_err0] = Compute_cum_error(pt_pt_err0_image, n, OutputDir,  ['cum error of initialization, noice_scale is ' num2str(noise_scale) ', ' mat2str(perturb_param)], 1); 
	
% 	% save results
	
	save([OutputDir 'Perturbed_Shape_Param_Initialization_SM_3D.mat'], 'p_mat_gt', 'p_mat_initialization', 'delta_p_initialization', 'pt_pt_err0_allimages', 'pt_pt_err0_image', ...
		'cum_err0', 'Kpi', 'noise_scale', 'VERSIONCHECK');

	%% extract SIFT features
	for SIFT_scale = 2   % 1.5 : 0.5 : 2.5
 		disp([ 'extracting features... SIFT scale is ',num2str(SIFT_scale)]);
		% debug
		parfor gg = 1 : n
			gg
			face_size = TR_face_size{gg};
			input_image = TR_images{gg};
			for k = 1 : Kpi
				lm = getShapeFrom3DParam(myShapeSM3D.M, myShapeSM3D.V, p_mat_initialization((gg-1) * Kpi + k, :));
				Sfeat = SIFT_features(input_image, lm, SIFT_scale, k, face_size, myShapeSM3D.M_2D);
				feat(k, gg, :) = reshape(Sfeat, 1, []); 
				b_mat_temp(k, gg, :) =  reshape(feat(k,gg, :), 1, []) * P - A0P;
			end
		end
		features = reshape(feat, Kpi * n, []); 
		b_mat = reshape(b_mat_temp, Kpi * n, []);
		save([OutputDir 'Perturbed_SIFT_Feature_labels_SM_3D_S-'  num2str(SIFT_scale) '_Kpi-'  num2str(Kpi) '.mat'], 'b_mat');
		save([OutputDir 'Perturbed_SIFT_Features_SM_3D_S-' num2str(SIFT_scale) '_Kpi-' num2str(Kpi) '.mat'], 'features');
	end
	disp('finished this function');
end











